#include <iostream>
#include <tchar.h>
#include <Windows.h>
#include <omp.h>
#include <vector>
#include <chrono>
#define N 10000 // Define the size of the array
#define MOD 20 // Define the modulus for random number generation



int main() {

    auto start = std::chrono::high_resolution_clock::now();
    
    int nthreads = 4, tid; // Define the number of threads and thread id
    int arr[N], num = 25; // Define the array and the number to search for
    int counter = 0;

    for(int i = 0; i < N; i++) {
        arr[i] = rand(); // Fill the array with random numbers
    }

    // Start of the parallel region
    #pragma omp parallel for schedule(guided) reduction(+:counter)
        // Each thread searches a section of the array for the number
        for (int i = 0; i < N; i++) {
            if(arr[i] <= num) {
                counter++;
            }
        }

    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = end - start;
    std::cout << "Number of elements less than or equal to " << num << " is " << counter << std::endl;
    std::cout << "Time taken: " << elapsed.count() << " seconds" << std::endl;

}

// Dynamic 5
// Number of elements less than or equal to 25 is 8
// Time taken : 0.0071105 seconds

// Static
// Number of elements less than or equal to 25 is 8
// Time taken : 0.0063551 seconds

// Static 5
// Number of elements less than or equal to 25 is 8
// Time taken : 0.0063793 seconds

// Guided
// Number of elements less than or equal to 25 is 8
// Time taken : 0.0059401 seconds

// No parallel
// Number of elements less than or equal to 25 is 8
// Time taken : 0.0002844 seconds